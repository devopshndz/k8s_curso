### profuindizar en kubeconfig, full teoria y algunos comandos
vamos al condumio

### kubeconfig o configuracion de kubernetes
se llama config
fichero yaml que necesitamos para determinar como nos conectamos aun determinado cluister de k8s.
donde esta?
--kubeconfig con el comando kubectl
variable de entorno $KUBECONFIG
por defecto está en un sitio del sitio
linux y mac: ~/.kube/config
windows: %USERPROFILE%\.kube\config
$ minikube profile list --> ver los perfiles

¿Que contiene el fichero?
certificado, el servidor al que conectarse, nombre, usuario, token de user, etc, mucho condumio de info.
se muestran clusters, users, contexts (cluster, ns y user) que son la forma de como conectar cluster con users.
para mas informacion, ver el archvio Kubeconfig.profuindizar

comandos mas comunes:
$ kubectl config set-credentials myself --username=admin --password=secret --> manejo de usuarios, crea myself con user admin y pass secret
$ kubectl config set-cluster local-server --server=http://localhost:8080 --> configurar un cluster
$ kubectl config set-context default-context --cluster=local-server --user=myself --> crear un contexto
$ kubectl config use-context default-context --> especificar cual es el default context con el que se esta trabajando
$ kubectl config set contexts.default-context.namespace the-right-prefix --> cual es el namespace
$ kubectl config view --> ver el kubeconfig

si se lanza todo esto se crea un fichero con todo.

### podemos ver el config en cd ~/.kube
$ cat config --> para ver el archvio
$ kubectl config view --> lo mismo que el cat pero desde cualquier lugar y mediante kubectl
$ kubectl config view | grep current --> El comando grep de Linux es una herramienta que se utiliza para buscar texto en archivos, en este caso buscamos current
$ kubectl config current-context --> nos muestra el contexto actual en el que se esta trabajando.
$ kubectl config use-context <name_context> --> para cambiar de contexto y trabajar con otro contexto

# annadir los datos de un cluster
$ kubectl config set-cluster <name> --> incorporar o modificar un cluster en config, si ya existe lo modifica, sino, lo crea.
$ kubectl config set-cluster cluster1 --server=https://1.2.3.4 --> ejemplo de configuracion de uin cluster1 nuevo y le pasamos la url de dicho server, esta es de ejemplo
podemos hacer el ejemplo aunque dara error, pero es para ver que en efecto el config toma las configuraciones que efectuamos
al correr el comando anterior, podemos ir al config y vemos que se a agregado el cluster1 con su server en la seccion de los clusters.
- cluster:
    server: https://1.2.3.4
  name: cluster1

$ kubectl --kubeconfig=config_alternativo config set-cluster cluster1 --server=https://1.2.3.4 
Esto crea el mismo cluster en otro fichero config llamadao config_alternativo y crea el cluster, un contexto null, un current context vacio, tipo config, preferencias vacias y users null.
esto para que sirve? principalmente para trabajar con ficheros diferentes si estoy trabajando para un cliente a y un cliente b, dividimos los ficheros dependiendo nuestro trabajo y asi tenemos otras configuraciones separadas.

$ $ kubectl config set-cluster cluster1 --certificate-authority=/home/dev/cert.crt --> 
forma de editar el cluster1 agregandole un certificado de autoridad, de ejemplo y ficticio, en la vida real esto debe ser verdadero. config view ==>
- cluster:
    certificate-authority: /home/dev/cert.crt
    server: https://1.2.3.4
  name: cluster1

ahora probamos en el config alternativo y hacemos cat al archivo, este archivo queda guardado en la misma ubicacion del config
$ kubectl --kubeconfig=config_alternativo config set-cluster cluster1 --server=https://1.2.3.4 --certificate-authority=/home/dev/cert.crt
cat config_alternativo 
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/dev/cert.crt
    server: https://1.2.3.4
name: cluster1
contexts: null
current-context: ""
kind: Config
preferences: {}
users: null

Si este fichero fuera de verdad, para poder trabajar con el de forma temporal sería:
$ kubectl --kubeconfig confiog_alternativo get pods 
y asi obtendría los pods de este config alternativo, ahora daria un error porque no esta configurado ni tiene cosas reales.

### añadir usuarios y credenciales
solo veremos como añadir estas credenciales, las conexiones se veran en otra seccion
$ kubectl config set-credentials --> para agregar o modificar credenciales
$ kubectl config set-credentials <name cluster> <certificado> <token> <aut de user password>
$ kubectl config set-credentials usu11 --username=usu1 --password=c2VjcmV0Cg== --> ejemplo de agregar credenciales 
view y aparece en el config hasta el final:
- name: usu11
  user:
    password: REDACTED
    username: usu1

$ kubectl config --kubeconfig=config_alternativo set-credentials usu11 --username=usu1 --password=c2VjcmV0Cg== --> lo mismo pero colocarlo en el config_alternativo
y ahí aparece

ahora añadir certificados
$ kubectl config set-credentials usu11 --client-certificate=/home/dev1/fichero.crt
$ kubectl config --kubeconfig=config_alternativo set-credentials usu11 --client-certificate=/home/dev1/fichero.crt

ahora añadir llaves keys
$ kubectl config set-credentials usu11 --client-key=/home/dev1/fichero.key
$ kubectl config --kubeconfig=config_alternativo set-credentials usu11 --client-key=/home/dev1/fichero.key
añade todo y lo podemos ver con el view

### contextos
mezclar cclusters con users
$ kubectl config set-context contexto-cluster1 --cluster=cluster1 --user=usu11 --namespace=desarrollo 
estamos creando un contesto de nombre contexto-cluster1 adjuntando el cluster1 con el usuario usu11 en el ns desarrollo
al hacer un view o un cat nos muestra el contexto creado. asi manipulamos tanto usuario como clusters para que trabajen bajo un contexto
- context:
    cluster: cluster1
    namespace: desarrollo
    user: usu11
  name: contexto-cluster1

 $ kubectl config --kubeconfig=config_alternativo set-context contexto-cluster1 --cluster=cluster1 --user=usu11 --namespace=desarrollo 
 hará lo mismo pero dentro del config_alternativo

 vamos a agregarle un contexto predefinido al cluster1, no se trabajara con el de minikube sino con el de cluster1:
 $ kubectl config --kubeconfig=config_alternativo use-context contexto-cluster1
 con use-context estamos diciendole al archivo config_alternativo que trabaje con el context context-cluster1 y no con minikube
